bool swapInt(int[] a, int[] b) is
  int size = len a;
  if (len b < size) then
    size = len b
  else
    skip
  fi;
  for i from 0 to size by 1 do
    int x = a[i];
    a[i] = b[i];
    b[i] = x
  done;
  return true
end

bool fillInt(int[] a, int x) is
  for i from 0 to len a by 1 do
    a[i] = x
  done;
  return true
end

bool sort(int[] a) is
  bool x = call sortBetween(a, 0, (len a) - 1);
  return true
end

bool sortBetween(int[] a, int l, int u) is
  int x = call partition(a, l, u);
  if (l < x - 1) then
    bool ret = call sortBetween(a, l, x - 1)
  else
    skip
  fi;
  if (x < u) then
    bool ret = call sortBetween(a, x, u)
  else
    skip
  fi;
  return true
end

int partition(int[] a, int l, int u) is
  int pivot = a[l];
  int i = l;
  int j = u;
  while i <= j do
    while a[i] < pivot do
      i = i + 1
    done;
    while a[j] > pivot do
      j = j - 1
    done;
    if (i <= j) then
      int x = a[i];
      a[i] = a[j];
      a[j] = x;
      i = i + 1;
      j = j - 1
    else
      skip
    fi
  done;
  return i
end
